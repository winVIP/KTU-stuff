@model IEnumerable<AutoNuoma.Models.RentPoint>

@{
	ViewBag.Title = "RentPointList";
}
<style>
	/* Always set the map height explicitly to define the size of the div
	   * element that contains the map. */
	#map {
		height: 400px;
		width: 400px;
	}
</style>
<h2>Nuomos punktų langas</h2>

<table class="table">
	<tr>
		<th>
			@Html.DisplayNameFor(model => model.Address)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Country)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Name)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.PhoneNumber)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Longitude)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Latitude)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.BeginningOfWork)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.EndingOfWork)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.WorkingDays)
		</th>
		<th></th>
	</tr>

	@foreach (var item in Model)
	{
		<tr>
			<td>
				@Html.DisplayFor(modelItem => item.Address)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Country)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Name)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.PhoneNumber)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Longitude)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Latitude)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.BeginningOfWork)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.EndingOfWork)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.WorkingDays)
			</td>
			<td>
				@Html.ActionLink("Trinti", "RentPointDelete", new { id = item.Id }, new { onclick = "return confirm('Ar tikrai norite ištrinti šį įrašą?');" })
			</td>
		</tr>
	}

</table>

<div>Žemėlapis</div>
<div id="map"></div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA2p62f4b2evZpGMlKIAI8dQ8Ja4868N7c"></script>
<script>
	var map;
	function initialize() {
		var mapOptions = {
			zoom: 8,
			center: { lat: -34.397, lng: 150.644 }
		};
		map = new google.maps.Map(document.getElementById('map'),
			mapOptions);

		var marker = new google.maps.Marker({
			// The below line is equivalent to writing:
			// position: new google.maps.LatLng(-34.397, 150.644)
			position: { lat: -34.397, lng: 150.644 },
			map: map
		});

		// You can use a LatLng literal in place of a google.maps.LatLng object when
		// creating the Marker object. Once the Marker object is instantiated, its
		// position will be available as a google.maps.LatLng object. In this case,
		// we retrieve the marker's position using the
		// google.maps.LatLng.getPosition() method.
		var infowindow = new google.maps.InfoWindow({
			content: '<p>Marker Location:' + marker.getPosition() + '</p>'
		});

		google.maps.event.addListener(marker, 'click', function () {
			infowindow.open(map, marker);
		});
	}

	google.maps.event.addDomListener(window, 'load', initialize);
</script>

<div>
	@Html.ActionLink("Nuomos punkto kūrimas", "RentPointCreate")
</div>
<div>
	@Html.ActionLink("Nuomos punkto trinimas", "RentPointDelete")
</div>
